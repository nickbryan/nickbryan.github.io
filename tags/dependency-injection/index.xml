<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dependency Injection on Nick Bryan</title><link>https://nickbryan.co.uk/tags/dependency-injection/</link><description>Recent content in Dependency Injection on Nick Bryan</description><generator>Hugo 0.125.2</generator><language>en-gb</language><lastBuildDate>Sat, 26 Feb 2022 17:25:42 +0000</lastBuildDate><atom:link href="https://nickbryan.co.uk/tags/dependency-injection/index.xml" rel="self" type="application/rss+xml"/><item><title>Dependency Injection in Rust with Type-Maps</title><link>https://nickbryan.co.uk/software/using-a-type-map-for-dependency-injection-in-rust/</link><pubDate>Sat, 26 Feb 2022 17:25:42 +0000</pubDate><guid>https://nickbryan.co.uk/software/using-a-type-map-for-dependency-injection-in-rust/</guid><description>Type Maps It is common in dynamically typed languages, such as PHP, to use a service container to aid in dependency injection. Dependency injection containers are usually represented as some sort of map/dictionary where a string representation of the type is set as the key and an instance of the type is set as the value. We can do something similar at compile time in Rust using a type-map as the core of the container.</description></item></channel></rss>