<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on Nick Bryan</title><link>https://nickbryan.co.uk/tags/rust/</link><description>Recent content in rust on Nick Bryan</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sat, 05 Feb 2022 17:33:40 +0000</lastBuildDate><atom:link href="https://nickbryan.co.uk/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Using a Type-Map for Dependency Injection in Rust</title><link>https://nickbryan.co.uk/software/using-a-type-map-for-dependency-injection-in-rust/</link><pubDate>Sat, 05 Feb 2022 17:33:40 +0000</pubDate><guid>https://nickbryan.co.uk/software/using-a-type-map-for-dependency-injection-in-rust/</guid><description>Type Maps In a dynamically typed language such as PHP, we can use a service container to dynamically get values bound to some type at runtime. This is usually done (in its simplest form) by having some string represent the type and storing the values in a key-value array. We can do something similar in Rust using static typing by utilising a type-map.
A type-map is a container that stores some arbitrary value against its given unique type in order for state to be shared within an application.</description></item></channel></rss>